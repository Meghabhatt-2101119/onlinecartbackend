import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CognitoIdentityServiceException as __BaseException } from "./CognitoIdentityServiceException";
/**
 * @public
 * @enum
 */
export declare const AmbiguousRoleResolutionType: {
    readonly AUTHENTICATED_ROLE: "AuthenticatedRole";
    readonly DENY: "Deny";
};
/**
 * @public
 */
export type AmbiguousRoleResolutionType = (typeof AmbiguousRoleResolutionType)[keyof typeof AmbiguousRoleResolutionType];
/**
 * @public
 * <p>A provider representing an Amazon Cognito user pool and its client ID.</p>
 */
export interface CognitoIdentityProvider {
    /**
     * <p>The provider name for an Amazon Cognito user pool. For example,
     *             <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.</p>
     */
    ProviderName?: string;
    /**
     * <p>The client ID for the Amazon Cognito user pool.</p>
     */
    ClientId?: string;
    /**
     * <p>TRUE if server-side token validation is enabled for the identity providerâ€™s
     *          token.</p>
     *          <p>Once you set <code>ServerSideTokenCheck</code> to TRUE for an identity pool, that
     *          identity pool will check with the integrated user pools to make sure that the user has not
     *          been globally signed out or deleted before the identity pool provides an OIDC token or AWS
     *          credentials for the user.</p>
     *          <p>If the user is signed out or deleted, the identity pool will return a 400 Not
     *          Authorized error.</p>
     */
    ServerSideTokenCheck?: boolean;
}
/**
 * @public
 * <p>Input to the CreateIdentityPool action.</p>
 */
export interface CreateIdentityPoolInput {
    /**
     * <p>A string that you provide.</p>
     */
    IdentityPoolName: string | undefined;
    /**
     * <p>TRUE if the identity pool supports unauthenticated logins.</p>
     */
    AllowUnauthenticatedIdentities: boolean | undefined;
    /**
     * <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
     *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     */
    AllowClassicFlow?: boolean;
    /**
     * <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
     */
    SupportedLoginProviders?: Record<string, string>;
    /**
     * <p>The "domain" by which Cognito will refer to your users. This name acts as a
     *          placeholder that allows your backend and the Cognito service to communicate about the
     *          developer provider. For the <code>DeveloperProviderName</code>, you can use letters as well
     *          as period (<code>.</code>), underscore (<code>_</code>), and dash
     *          (<code>-</code>).</p>
     *          <p>Once you have set a developer provider name, you cannot change it. Please take care
     *          in setting this parameter.</p>
     */
    DeveloperProviderName?: string;
    /**
     * <p>The Amazon Resource Names (ARN) of the OpenID Connect providers.</p>
     */
    OpenIdConnectProviderARNs?: string[];
    /**
     * <p>An array of Amazon Cognito user pools and their client IDs.</p>
     */
    CognitoIdentityProviders?: CognitoIdentityProvider[];
    /**
     * <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
     *          pool.</p>
     */
    SamlProviderARNs?: string[];
    /**
     * <p>Tags to assign to the identity pool. A tag is a label that you can apply to identity
     *          pools to categorize and manage them in different ways, such as by purpose, owner,
     *          environment, or other criteria.</p>
     */
    IdentityPoolTags?: Record<string, string>;
}
/**
 * @public
 * <p>An object representing an Amazon Cognito identity pool.</p>
 */
export interface IdentityPool {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
    /**
     * <p>A string that you provide.</p>
     */
    IdentityPoolName: string | undefined;
    /**
     * <p>TRUE if the identity pool supports unauthenticated logins.</p>
     */
    AllowUnauthenticatedIdentities: boolean | undefined;
    /**
     * <p>Enables or disables the Basic (Classic) authentication flow. For more information, see
     *       <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Identity Pools (Federated Identities) Authentication Flow</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
     */
    AllowClassicFlow?: boolean;
    /**
     * <p>Optional key:value pairs mapping provider names to provider app IDs.</p>
     */
    SupportedLoginProviders?: Record<string, string>;
    /**
     * <p>The "domain" by which Cognito will refer to your users.</p>
     */
    DeveloperProviderName?: string;
    /**
     * <p>The ARNs of the OpenID Connect providers.</p>
     */
    OpenIdConnectProviderARNs?: string[];
    /**
     * <p>A list representing an Amazon Cognito user pool and its client ID.</p>
     */
    CognitoIdentityProviders?: CognitoIdentityProvider[];
    /**
     * <p>An array of Amazon Resource Names (ARNs) of the SAML provider for your identity
     *          pool.</p>
     */
    SamlProviderARNs?: string[];
    /**
     * <p>The tags that are assigned to the identity pool. A tag is a label that you can apply to
     *          identity pools to categorize and manage them in different ways, such as by purpose, owner,
     *          environment, or other criteria.</p>
     */
    IdentityPoolTags?: Record<string, string>;
}
/**
 * @public
 * <p>Thrown when the service encounters an error during processing the request.</p>
 */
export declare class InternalErrorException extends __BaseException {
    readonly name: "InternalErrorException";
    readonly $fault: "server";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
}
/**
 * @public
 * <p>Thrown for missing or bad input parameter(s).</p>
 */
export declare class InvalidParameterException extends __BaseException {
    readonly name: "InvalidParameterException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
}
/**
 * @public
 * <p>Thrown when the total number of user pools has exceeded a preset limit.</p>
 */
export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}
/**
 * @public
 * <p>Thrown when a user is not authorized to access the requested resource.</p>
 */
export declare class NotAuthorizedException extends __BaseException {
    readonly name: "NotAuthorizedException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
}
/**
 * @public
 * <p>Thrown when a user tries to use a login which is already linked to another
 *          account.</p>
 */
export declare class ResourceConflictException extends __BaseException {
    readonly name: "ResourceConflictException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceConflictException, __BaseException>);
}
/**
 * @public
 * <p>Thrown when a request is throttled.</p>
 */
export declare class TooManyRequestsException extends __BaseException {
    readonly name: "TooManyRequestsException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
}
/**
 * @public
 * <p>Input to the <code>DeleteIdentities</code> action.</p>
 */
export interface DeleteIdentitiesInput {
    /**
     * <p>A list of 1-60 identities that you want to delete.</p>
     */
    IdentityIdsToDelete: string[] | undefined;
}
/**
 * @public
 * @enum
 */
export declare const ErrorCode: {
    readonly ACCESS_DENIED: "AccessDenied";
    readonly INTERNAL_SERVER_ERROR: "InternalServerError";
};
/**
 * @public
 */
export type ErrorCode = (typeof ErrorCode)[keyof typeof ErrorCode];
/**
 * @public
 * <p>An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and
 *          IdentityId.</p>
 */
export interface UnprocessedIdentityId {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId?: string;
    /**
     * <p>The error code indicating the type of error that occurred.</p>
     */
    ErrorCode?: ErrorCode | string;
}
/**
 * @public
 * <p>Returned in response to a successful <code>DeleteIdentities</code>
 *          operation.</p>
 */
export interface DeleteIdentitiesResponse {
    /**
     * <p>An array of UnprocessedIdentityId objects, each of which contains an ErrorCode and
     *          IdentityId.</p>
     */
    UnprocessedIdentityIds?: UnprocessedIdentityId[];
}
/**
 * @public
 * <p>Input to the DeleteIdentityPool action.</p>
 */
export interface DeleteIdentityPoolInput {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
}
/**
 * @public
 * <p>Thrown when the requested resource (for example, a dataset or record) does not
 *          exist.</p>
 */
export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}
/**
 * @public
 * <p>Input to the <code>DescribeIdentity</code> action.</p>
 */
export interface DescribeIdentityInput {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId: string | undefined;
}
/**
 * @public
 * <p>A description of the identity.</p>
 */
export interface IdentityDescription {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId?: string;
    /**
     * <p>The provider names.</p>
     */
    Logins?: string[];
    /**
     * <p>Date on which the identity was created.</p>
     */
    CreationDate?: Date;
    /**
     * <p>Date on which the identity was last modified.</p>
     */
    LastModifiedDate?: Date;
}
/**
 * @public
 * <p>Input to the DescribeIdentityPool action.</p>
 */
export interface DescribeIdentityPoolInput {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
}
/**
 * @public
 * <p>An exception thrown when a dependent service such as Facebook or Twitter is not
 *          responding</p>
 */
export declare class ExternalServiceException extends __BaseException {
    readonly name: "ExternalServiceException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<ExternalServiceException, __BaseException>);
}
/**
 * @public
 * <p>Input to the <code>GetCredentialsForIdentity</code> action.</p>
 */
export interface GetCredentialsForIdentityInput {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId: string | undefined;
    /**
     * <p>A set of optional name-value pairs that map provider names to provider tokens. The
     *          name-value pair will follow the syntax "provider_name":
     *          "provider_user_identifier".</p>
     *          <p>Logins should not be specified when trying to get credentials for an unauthenticated
     *          identity.</p>
     *          <p>The Logins parameter is required when using identities associated with external
     *          identity providers such as Facebook. For examples of <code>Logins</code> maps, see the code
     *          examples in the <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/external-identity-providers.html">External Identity Providers</a> section of the Amazon Cognito Developer
     *          Guide.</p>
     */
    Logins?: Record<string, string>;
    /**
     * <p>The Amazon Resource Name (ARN) of the role to be assumed when multiple roles were
     *          received in the token from the identity provider. For example, a SAML-based identity
     *          provider. This parameter is optional for identity providers that do not support role
     *          customization.</p>
     */
    CustomRoleArn?: string;
}
/**
 * @public
 * <p>Credentials for the provided identity ID.</p>
 */
export interface Credentials {
    /**
     * <p>The Access Key portion of the credentials.</p>
     */
    AccessKeyId?: string;
    /**
     * <p>The Secret Access Key portion of the credentials</p>
     */
    SecretKey?: string;
    /**
     * <p>The Session Token portion of the credentials</p>
     */
    SessionToken?: string;
    /**
     * <p>The date at which these credentials will expire.</p>
     */
    Expiration?: Date;
}
/**
 * @public
 * <p>Returned in response to a successful <code>GetCredentialsForIdentity</code>
 *          operation.</p>
 */
export interface GetCredentialsForIdentityResponse {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId?: string;
    /**
     * <p>Credentials for the provided identity ID.</p>
     */
    Credentials?: Credentials;
}
/**
 * @public
 * <p>Thrown if the identity pool has no role associated for the given auth type
 *          (auth/unauth) or if the AssumeRole fails.</p>
 */
export declare class InvalidIdentityPoolConfigurationException extends __BaseException {
    readonly name: "InvalidIdentityPoolConfigurationException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<InvalidIdentityPoolConfigurationException, __BaseException>);
}
/**
 * @public
 * <p>Input to the GetId action.</p>
 */
export interface GetIdInput {
    /**
     * <p>A standard AWS account ID (9+ digits).</p>
     */
    AccountId?: string;
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
    /**
     * <p>A set of optional name-value pairs that map provider names to provider tokens. The
     *          available provider names for <code>Logins</code> are as follows:</p>
     *          <ul>
     *             <li>
     *                <p>Facebook: <code>graph.facebook.com</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>Amazon Cognito user pool:
     *                   <code>cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID></code>,
     *                for example, <code>cognito-idp.us-east-1.amazonaws.com/us-east-1_123456789</code>.
     *             </p>
     *             </li>
     *             <li>
     *                <p>Google: <code>accounts.google.com</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>Amazon: <code>www.amazon.com</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>Twitter: <code>api.twitter.com</code>
     *                </p>
     *             </li>
     *             <li>
     *                <p>Digits: <code>www.digits.com</code>
     *                </p>
     *             </li>
     *          </ul>
     */
    Logins?: Record<string, string>;
}
/**
 * @public
 * <p>Returned in response to a GetId request.</p>
 */
export interface GetIdResponse {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId?: string;
}
/**
 * @public
 * <p>Input to the <code>GetIdentityPoolRoles</code> action.</p>
 */
export interface GetIdentityPoolRolesInput {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
}
/**
 * @public
 * @enum
 */
export declare const MappingRuleMatchType: {
    readonly CONTAINS: "Contains";
    readonly EQUALS: "Equals";
    readonly NOT_EQUAL: "NotEqual";
    readonly STARTS_WITH: "StartsWith";
};
/**
 * @public
 */
export type MappingRuleMatchType = (typeof MappingRuleMatchType)[keyof typeof MappingRuleMatchType];
/**
 * @public
 * <p>A rule that maps a claim name, a claim value, and a match type to a role
 *          ARN.</p>
 */
export interface MappingRule {
    /**
     * <p>The claim name that must be present in the token, for example, "isAdmin" or
     *          "paid".</p>
     */
    Claim: string | undefined;
    /**
     * <p>The match condition that specifies how closely the claim value in the IdP token must
     *          match <code>Value</code>.</p>
     */
    MatchType: MappingRuleMatchType | string | undefined;
    /**
     * <p>A brief string that the claim must match, for example, "paid" or "yes".</p>
     */
    Value: string | undefined;
    /**
     * <p>The role ARN.</p>
     */
    RoleARN: string | undefined;
}
/**
 * @public
 * <p>A container for rules.</p>
 */
export interface RulesConfigurationType {
    /**
     * <p>An array of rules. You can specify up to 25 rules per identity provider.</p>
     *          <p>Rules are evaluated in order. The first one to match specifies the role.</p>
     */
    Rules: MappingRule[] | undefined;
}
/**
 * @public
 * @enum
 */
export declare const RoleMappingType: {
    readonly RULES: "Rules";
    readonly TOKEN: "Token";
};
/**
 * @public
 */
export type RoleMappingType = (typeof RoleMappingType)[keyof typeof RoleMappingType];
/**
 * @public
 * <p>A role mapping.</p>
 */
export interface RoleMapping {
    /**
     * <p>The role mapping type. Token will use <code>cognito:roles</code> and
     *             <code>cognito:preferred_role</code> claims from the Cognito identity provider token to
     *          map groups to roles. Rules will attempt to match claims from the token to map to a
     *          role.</p>
     */
    Type: RoleMappingType | string | undefined;
    /**
     * <p>If you specify Token or Rules as the <code>Type</code>,
     *             <code>AmbiguousRoleResolution</code> is required.</p>
     *          <p>Specifies the action to be taken if either no rules match the claim value for the
     *             <code>Rules</code> type, or there is no <code>cognito:preferred_role</code> claim and
     *          there are multiple <code>cognito:roles</code> matches for the <code>Token</code>
     *          type.</p>
     */
    AmbiguousRoleResolution?: AmbiguousRoleResolutionType | string;
    /**
     * <p>The rules to be used for mapping users to roles.</p>
     *          <p>If you specify Rules as the role mapping type, <code>RulesConfiguration</code> is
     *          required.</p>
     */
    RulesConfiguration?: RulesConfigurationType;
}
/**
 * @public
 * <p>Returned in response to a successful <code>GetIdentityPoolRoles</code>
 *          operation.</p>
 */
export interface GetIdentityPoolRolesResponse {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId?: string;
    /**
     * <p>The map of roles associated with this pool. Currently only authenticated and
     *          unauthenticated roles are supported.</p>
     */
    Roles?: Record<string, string>;
    /**
     * <p>How users for a specific identity provider are to mapped to roles. This is a
     *             String-to-<a>RoleMapping</a> object map. The string identifies the identity
     *          provider, for example, "graph.facebook.com" or
     *          "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id".</p>
     */
    RoleMappings?: Record<string, RoleMapping>;
}
/**
 * @public
 * <p>Input to the GetOpenIdToken action.</p>
 */
export interface GetOpenIdTokenInput {
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId: string | undefined;
    /**
     * <p>A set of optional name-value pairs that map provider names to provider tokens. When
     *          using graph.facebook.com and www.amazon.com, supply the access_token returned from the
     *          provider's authflow. For accounts.google.com, an Amazon Cognito user pool provider, or any
     *          other OpenID Connect provider, always include the <code>id_token</code>.</p>
     */
    Logins?: Record<string, string>;
}
/**
 * @public
 * <p>Returned in response to a successful GetOpenIdToken request.</p>
 */
export interface GetOpenIdTokenResponse {
    /**
     * <p>A unique identifier in the format REGION:GUID. Note that the IdentityId returned may
     *          not match the one passed on input.</p>
     */
    IdentityId?: string;
    /**
     * <p>An OpenID token, valid for 10 minutes.</p>
     */
    Token?: string;
}
/**
 * @public
 * <p>The provided developer user identifier is already registered with Cognito under a
 *          different identity ID.</p>
 */
export declare class DeveloperUserAlreadyRegisteredException extends __BaseException {
    readonly name: "DeveloperUserAlreadyRegisteredException";
    readonly $fault: "client";
    /**
     * @internal
     */
    constructor(opts: __ExceptionOptionType<DeveloperUserAlreadyRegisteredException, __BaseException>);
}
/**
 * @public
 * <p>Input to the <code>GetOpenIdTokenForDeveloperIdentity</code> action.</p>
 */
export interface GetOpenIdTokenForDeveloperIdentityInput {
    /**
     * <p>An identity pool ID in the format REGION:GUID.</p>
     */
    IdentityPoolId: string | undefined;
    /**
     * <p>A unique identifier in the format REGION:GUID.</p>
     */
    IdentityId?: string;
    /**
     * <p>A set of optional name-value pairs that map provider names to provider tokens. Each
     *          name-value pair represents